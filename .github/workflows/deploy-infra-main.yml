name: 'Deploy Azure infra using Terraform'
on:
  push:
    branches:
      - 'feature/*'
      - 'main'
    paths:
      - 'infra/*'
      - '.github/workflows/deploy-infra-main.yml'
jobs:
  code_checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: 'Install Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
         terraform_version: "1.6.5"
      - name: Linting
        run: terraform fmt -check -diff -recursive . 
  build_plan:
    runs-on: ubuntu-latest
    needs: code_checks
    env: 
      ENVIRONMENT: 'dev'
      STATE_RESOURCE_GROUP_NAME: 'rg-dtype-state-dev'
      STATE_STORAGE_ACCOUNT_NAME: 'stdtypestatedev'
      STATE_CONTAINER_NAME: 'state'
      STATE_FILE_NAME: 'state.tfstate'
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Az login
        uses: azure/login@v1
        with:
         creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Ensure TF state
        shell: pwsh
        run: ./infra/setup-terraform-state.ps1 -env ${{env.ENVIRONMENT}} -resourceGroupName ${{env.STATE_RESOURCE_GROUP_NAME}} -storageAccountName ${{env.STATE_STORAGE_ACCOUNT_NAME}} -containerName ${{env.STATE_CONTAINER_NAME}}
      - name: 'Install Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
         terraform_version: "1.6.5"
      - name: Set environment variables
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
          echo "ARM_TENANT_ID=${{ secrets.AZURE_CLIENT_SECRET }}"
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
      - name: 'Terraform Init'
        run: | 
          terraform init -backend-config="resource_group_name=${{env.STATE_RESOURCE_GROUP_NAME}}" -backend-config="storage_account_name=${{env.STATE_STORAGE_ACCOUNT_NAME}}" -backend-config="container_name=${{env.STATE_CONTAINER_NAME}}" -backend-config="key=state.tfstate" 
        working-directory: infra
      - name: 'Terraform Plan'
        run: |
          cd infra
          terraform plan -var-file="tfvars/dev.tfvars"
  manual_validation:
    needs: build_plan
    runs-on: ubuntu-latest
    steps:
      - name: Request Manual Validation
        id: validation
        run: |
          echo "Manual validation is required before terraform apply"
          echo "Please review the changes and decide whether to proceed."
          echo "::set-output name=validation_required::true" # Set an output to indicate validation is required
  deploy_dev:
    needs: manual_validation
    runs-on: ubuntu-latest
    env: 
      ENVIRONMENT: 'dev'
      STATE_RESOURCE_GROUP_NAME: 'rg-dtype-state-dev'
      STATE_STORAGE_ACCOUNT_NAME: 'stdtypestatedev'
      STATE_CONTAINER_NAME: 'state'
      STATE_FILE_NAME: 'state.tfstate'
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set environment variables
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
          echo "ARM_TENANT_ID=${{ secrets.AZURE_CLIENT_SECRET }}"
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
      - name: 'Terraform Init'
        run: | 
          terraform init -backend-config="resource_group_name=${{env.STATE_RESOURCE_GROUP_NAME}}" -backend-config="storage_account_name=${{env.STATE_STORAGE_ACCOUNT_NAME}}" -backend-config="container_name=${{env.STATE_CONTAINER_NAME}}" -backend-config="key=state.tfstate" 
        working-directory: infra
      - name: 'Terraform Apply'
        run: |
          cd infra
          terraform apply --auto-approve -var-file="tfvars/dev.tfvars"
      